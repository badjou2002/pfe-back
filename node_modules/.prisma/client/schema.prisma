// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Specialite {
  id     Int      @id @default(autoincrement()) @db.UnsignedInt
  nom    String   @unique @db.VarChar(255)
  image  String   @db.VarChar(1000)
  Niveau Niveau[]
}

model Niveau {
  id           Int           @id @default(autoincrement()) @db.UnsignedInt
  num          Int
  specialite   Specialite    @relation(fields: [specialiteId], references: [id], onDelete: Cascade)
  specialiteId Int           @db.UnsignedInt
  EspaceCours  EspaceCours[]
}

model EspaceCours {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  nom            String           @db.VarChar(255)
  image          String           @db.VarChar(255)
  cleAccee       String           @db.VarChar(255)
  niveau         Niveau           @relation(fields: [niveauId], references: [id], onDelete: Cascade)
  niveauId       Int              @db.UnsignedInt
  enseingant     Enseingant       @relation(fields: [enseingantId], references: [id], onDelete: Cascade)
  enseingantId   Int              @db.UnsignedInt
  Theme          Theme[]
  BanqueQuestion BanqueQuestion[]
  Gamification   Gamification[]
}

model Theme {
  id            Int           @id @default(autoincrement()) @db.UnsignedInt
  nom           String        @db.VarChar(255)
  espaceCours   EspaceCours   @relation(fields: [espaceCoursId], references: [id], onDelete: Cascade)
  espaceCoursId Int           @db.UnsignedInt
  EspaceDepot   EspaceDepot[]
  Ressource     Ressource[]
  Test          Test[]
}

model EspaceDepot {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  nom       String   @db.VarChar(255)
  type      TypeFile
  theme     Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId   Int      @db.UnsignedInt
  dateDebut DateTime @default(now())
  dateFin   DateTime
  Depot     Depot[]
}

model Ressource {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  nom         String        @db.VarChar(255)
  file        String        @db.VarChar(1000)
  type        TypeFile
  theme       Theme         @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId     Int           @db.UnsignedInt
  dateDepot   DateTime      @default(now())
  Commentaire Commentaire[]
}

model Test {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  nom          String         @db.VarChar(255)
  point        Int
  periode      Int
  theme        Theme          @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId      Int            @db.UnsignedInt
  dateDebut    DateTime       @default(now())
  dateFin      DateTime
  Resultat     Resultat[]
  TestQuestion TestQuestion[]
}

model BanqueQuestion {
  id            Int            @id @default(autoincrement()) @db.UnsignedInt
  num           Int            @unique
  desc          String         @db.VarChar(1000)
  espaceCours   EspaceCours    @relation(fields: [espaceCoursId], references: [id], onDelete: Cascade)
  espaceCoursId Int            @db.UnsignedInt
  Reponse       Reponse[]
  TestQuestion  TestQuestion[]
}

model Reponse {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  num              Int
  desc             String         @db.VarChar(1000)
  isCorrecte       Boolean
  banqueQuestion   BanqueQuestion @relation(fields: [banqueQuestionId], references: [id], onDelete: Cascade)
  banqueQuestionId Int            @db.UnsignedInt
}

model Commentaire {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  desc        String    @db.VarChar(1000)
  font        String    @db.VarChar(255)
  italic      Boolean
  ressource   Ressource @relation(fields: [ressourceId], references: [id], onDelete: Cascade)
  ressourceId Int       @db.UnsignedInt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @db.UnsignedInt
}

model User {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  prenom      String        @db.VarChar(255)
  nom         String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  image       String        @db.VarChar(1000)
  password    String        @db.VarChar(255)
  telephone   Int
  role        RoleUser
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  Etudiant    Etudiant?
  Enseingant  Enseingant?
  Admin       Admin?
  Commentaire Commentaire[]
}

model Etudiant {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int            @unique @db.UnsignedInt
  matricule    Int            @unique
  dateNaiss    DateTime
  Gamification Gamification[]
  Resultat     Resultat[]
  Depot        Depot[]
}

model Enseingant {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int           @unique @db.UnsignedInt
  CIN         Int           @unique
  EspaceCours EspaceCours[]
}

model Admin {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int    @unique @db.UnsignedInt
  CIN    Int    @unique
  post   String @db.VarChar(255)
}

model Gamification {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  etudiant      Etudiant    @relation(fields: [etudiantId], references: [id], onDelete: Cascade)
  etudiantId    Int         @db.UnsignedInt
  espaceCours   EspaceCours @relation(fields: [espaceCoursId], references: [id], onDelete: Cascade)
  espaceCoursId Int         @db.UnsignedInt
  point         Int         @default(0)
}

model Resultat {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  etudiant   Etudiant @relation(fields: [etudiantId], references: [id], onDelete: Cascade)
  etudiantId Int      @db.UnsignedInt
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId     Int      @db.UnsignedInt
  point      Int      @default(0)
}

model TestQuestion {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  point            Int            @default(1)
  banqueQuestion   BanqueQuestion @relation(fields: [banqueQuestionId], references: [id], onDelete: Cascade)
  banqueQuestionId Int            @db.UnsignedInt
  test             Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId           Int            @db.UnsignedInt
}

model Depot {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  etudiant      Etudiant    @relation(fields: [etudiantId], references: [id], onDelete: Cascade)
  etudiantId    Int         @db.UnsignedInt
  espaceDepot   EspaceDepot @relation(fields: [espaceDepotId], references: [id], onDelete: Cascade)
  espaceDepotId Int         @db.UnsignedInt
  file          String      @db.VarChar(1000)
}

enum RoleUser {
  admin
  etudiant
  enseingant
}

enum TypeFile {
  image
  video
  autre
}
